service: boardless-backend # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-db

  stage: dev
  region: ap-southeast-2
  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DB_TABLE}"

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: api/test
          method: get
          cors:
                origin: 'https://mcat-ee.github.io' #WHOOPS - TODO remove this and ensure no side effects
                allowCredentials: true
                headers: # <-- Specify allowed headers
                  - Access-Control-Allow-Origin
                  - Access-Control-Allow-Credentials

  getBoards:
    handler: handler.getBoards
    events:
      - http:
          origin: 'https://mcat-ee.github.io' #WHOOPS - TODO remove this and ensure no side effects
          path: api/getBoards
          method: get
          cors: #Removed origin parameter to see if this still works
                allowCredentials: true
                headers: # <-- Specify allowed headers
                  - Access-Control-Allow-Origin
                  - Access-Control-Allow-Credentials

resources:
  Resources:
    DBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DB_TABLE}